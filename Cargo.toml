[package]
name = "sage"
version = "0.3.1"
authors = ["Victor I. Afolabi <javafolabi@gmail.com>"]
edition = "2018"
description = "Sage is an open source Knowledge Graph used to represent linked-data."
readme = "README.md"
homepage = "https://github.io/victor-iyi/sage"
repository = "https://github.com/victor-iyi/sage"
license = "Apache-2.0"
keywords = ["sage", "knowledge-graph", "linked-data"]
categories = ["data-structures", "science", "text-processing"]
exclude = ["/resources"]
publish = false
autotests = true

[lib]
name = "sage"
path = "src/lib.rs"

[dependencies]
dotenv = "0.15"
ryu = "1.0.5"
ntriple = "0.1.1"
regex = "1.5"
rdf = "0.1.4"
rand = "0.8"
chrono = { version = "0.4" }
itoa = { version = "0.4", default-features = false }
serde = { version = "1.0", default-features = false }
serde_json = { version = "1.0" }
uuid = { version = "0.8", features = ["serde", "v4"] }
indexmap = { version = "1.7", optional = true }

[dev-dependencies]
log = "0.4"
serde = "1.0"
serde_bytes = "0.11"
serde_stacker = "0.1.4"
serde_derive = "1.0"

[workspace]
members = [
  "sage_cli",
]

[features]
# Use an arbitrary precision number representation for sage::Number.
# This allows sage numbers of arbitrary size/precision to be read into
# a Number and written back to a string without loss of precision.
arbitrary_precision = []

# Use sufficient precision when parsing fixed precision floats from JSON to
# ensure that they maintain accuracy when round-tripped through JSON. This
# comes at approximately 2x performance cost for parsing floats compared to
# the default best-effort precision.
#
# Unlike "arbitrary_precision", this feature makes f64 -> JSON -> f64 produce
# output identical to the input.
# float_roundtrip = []

# Make sage::Map use a representation which maintains insertion order.
# This allows data to be read into `DType` and written back to a string
# while preserving the order of map keys in the input.
preserve_order = ["indexmap"]

# Provide a `RawDType` type that can hold unprocessed JSON during deserialization.
raw_dtype = []

# Provide a method disable_recursion_limit to parse arbitrarily deep JSON
# structures without any consideration for overflowing the stack. When using
# this feature, you will want to provide some other way to protect against stack
# overflows, such as by wrapping your Deserializer in a dynamically growing
# stack adapter provided by the `serde_stacker` crate.
#
# Additionally, you will need to be careful around other recursive operations on
# the parsed result which may overflow the stack after deserialization has
# completed, including, but not limited to, `Display` and `Debug` impls.
unbounded_depth = []

[badges]
appveyor = { repository = "victor-iyi/sage", service = "github" }
travis-ci = { repository = "victor-iyi/sage" }
